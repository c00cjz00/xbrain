<?php
## command ##
/*
php landmark_affineTransform_streamxform.php \ 
../../demoData/linesetFile/20170728_33_02_innerBrain_point.txt \
../../demoData/20170728_33_02/20170728_33_02_Resample_4_4_4_innerBrain.affineMatrix \
1
*/
## Configure ##
$dirBin=dirname(__FILE__);
include(dirname($dirBin)."/config.php");

## Input data ##
$pointFile="../../demoData/linesetFile/20170728_33_02_innerBrain_point.txt";
$matrixFile="../../demoData/20170728_33_02/20170728_33_02_Resample_4_4_4_innerBrain.affineMatrix"; 
$level=1;

## input parameter ##
if (isset($argv[1])) $linesetFile_affine=$argv[1]; 
if (isset($argv[2])) $matrixFile=$argv[2]; 
if (isset($argv[3])) $level=$argv[3]; 

## others ##
$saveDir=dirname($matrixFile);
$boxFile=substr($matrixFile,0,-13)."_affine.box";
$afiine_matrix=$saveDir."/0-affine";
$nonrigid_matrix=$saveDir."/0-nonrigid";
$levelDir=$saveDir."/0-nonrigid/level-0".$level.".list";  


## outputFile ##
$landmarkFile=$pointFile.".am";
$linesetAffineTransformFile=$landmarkFile."_affine";
$linesetAffineTransform_WarpFile=$landmarkFile."_affine_warp";

if (is_file($linesetAffineTransform_WarpFile)) {
echo $linesetAffineTransform_WarpFile."\n";
exit();
}

$script="# Amira Script
# Generated by Amira 6.3.0
proc applyTransform {inputFile outoutFile t0 t1 t2 t3 t4 t5 t6 t7 t8 t9 t10 t11 t12 t13 t14 t15} {
###### 讀取檔案
[ load \$inputFile ] setLabel input; input fire;
input setTransform \$t0 \$t1 \$t2 \$t3 \$t4 \$t5 \$t6 \$t7 \$t8 \$t9 \$t10 \$t11 \$t12 \$t13 \$t14 \$t15
input applyTransform
# save transform 
input parameters setValue Filename \$outoutFile
#input parameters setValue SaveInfo \"LandmarkSet Ascii\"
input save
sleep 1
#exit
}
";

$lmp=""; $pNum="";
if (is_file($pointFile)){
 $pointArr=file($pointFile);
 for($i=0;$i<count($pointArr);$i++){
  $pArr=explode(" ",trim($pointArr[$i]));
  if (count($pArr)==3) {
   $lmp.=trim($pointArr[$i])."\n";
   $pNum++;
  }
 }  
}
if ($lmp!=""){
$tmp="# AmiraMesh 3D ASCII 2.0
define Markers ".$pNum."
Parameters {
    NumSets 1,
    ContentType \"LandmarkSet\"
}
Markers { float[3] Coordinates } @1
# Data section follows
@1
".$lmp."
";
 $fp = fopen($landmarkFile, "w"); fwrite($fp, $tmp); fclose($fp);
}

if (is_file($matrixFile)) {
 $mArr=file($matrixFile);
 $matrix=trim($mArr[1]);
 $BArr=file($boxFile); $B0Arr=explode(" ",trim($BArr[2])); $B2Arr=explode(" ",trim($BArr[2]));   

 $script.="applyTransform ".$landmarkFile." ".$linesetAffineTransformFile." ".$matrix."
 exit
 ";

 
 $prgfile_hx = tempnam("/disk4/tmp", "warping_");
 $fp = fopen($prgfile_hx, "w");
 fwrite($fp, $script);
 fclose($fp);
 exec("vglrun ".$amiraBin." ".$prgfile_hx);

 if (is_file($linesetAffineTransformFile)){
  
  $tmpArr=position($linesetAffineTransformFile);
  $otherArr=$tmpArr[0];
  $positionArr=$tmpArr[1];
  $pointArr=$tmpArr[2];
  $record=implode("\n",$otherArr)."\n";
  $streamTmp="";
  $postion_affineTransformArr=$pointArr; //keep data
  for($i=0;$i<count($pointArr);$i++){
   $point=trim($pointArr[$i]);
   $pArr=explode(" ",$point);
   $x=$pArr[0]-$B0Arr[0];
   $y=$pArr[1]-$B0Arr[2];
   $z=$pArr[2]-$B0Arr[4];
   $streamTmp.=$x." ".$y." ".$z."\n";

  }
  //echo $streamTmp; exit();
  $prgfile_hx = tempnam("/tmp", "warping_"); $fp = fopen($prgfile_hx, "w"); fwrite($fp, $streamTmp);  fclose($fp);
  $cmd="cat ".$prgfile_hx." | /disk4/script/warpXbrain/cmtk/bin/streamxform -- --inverse ".$levelDir;
   
  echo $cmd."\n"; $pointArr=explode("\n",trim(shell_exec($cmd)));
     
  $recordTmp_warp="";  
  for($i=0;$i<count($pointArr);$i++){
   $point=trim($pointArr[$i]);
   $pArr=explode(" ",$point);
   $x=$pArr[0]-$B0Arr[0]+$B2Arr[0]+$B0Arr[0];
   $y=$pArr[1]-$B0Arr[2]+$B2Arr[2]+$B0Arr[2];
   $z=$pArr[2]-$B0Arr[4]+$B2Arr[4]+$B0Arr[4];
   $recordTmp_warp.=$x." ".$y." ".$z."\n";
  }
  $record.=$recordTmp_warp;
  //echo $recordTmp_warp;
  $fp = fopen($linesetAffineTransform_WarpFile, "w");
  fwrite($fp, $record);
  fclose($fp);
  sleep(1);
  echo $linesetAffineTransformFile."\n";
  echo $linesetAffineTransform_WarpFile."\n";
 
 }else{
  echo "Error\n";
 }

}


function position($lineset){
  $otherArr=array();
  $positionArr=array();
  $pointArr=array();
  $lineArr=file($lineset);
  $linNum=count($lineArr);
  $start=0;
  for($i=0;$i<$linNum;$i++){
    $line=trim($lineArr[$i]);
    if (($start==1)&&($line!="") && (substr($line,0,1)!="@")) array_push($positionArr,$line);
    if (($start==2)&&($line!="") && (substr($line,0,1)!="@")) array_push($pointArr,$line);

    if ($start==0) array_push($otherArr,$line);



    if (substr($line,0,2)=="@2") $start=1;
    if (substr($line,0,2)=="@1") $start=2;

  }
  return array($otherArr,$positionArr,$pointArr);
}


?>
